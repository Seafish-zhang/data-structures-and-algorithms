package leetcode5;

public class LeetCode458 {

    public static void main(String[] args) {
        System.out.println(poorPigs(1000, 15, 60));
        System.out.println(poorPigs(125, 15, 60));
        System.out.println(poorPigs(1024, 10, 40));
    }

    /**
     * 可怜的小猪
     * <p>有水桶buckets，其中只有一桶装含有毒药，其余装的都是水。</p>
     * <p>如果小猪喝了毒药，它会在minutesToDie时间内死亡</p>
     * <p>问，现在有minutesToTest时间测试，最少需要多少只猪找到这个有毒的水桶</p>
     *
     * @param buckets       水桶数量
     * @param minutesToDie  死亡时间
     * @param minutesToTest 测试时间
     * @return 最少需要猪的数量
     */
    private static int poorPigs(int buckets, int minutesToDie, int minutesToTest) {
        if (buckets-- == 1) {
            return 0;
        }

        // 可以检验的时间次数 60 / 15 + 1 = 5
        int base = minutesToTest / minutesToDie + 1;
        // 分析：
        // 如果只有一只猪，那么可以构建一维数组[1,2,3,4,5]
        // 0,15,30,45分别喝1,2,3,4好桶，那么可以根据死亡时间（15钟内/30分钟内/45分钟内/60分钟内）/或者不死亡
        // 可以得出桶（1/2/3/4/5）中具体哪个桶有毒。则一只猪在当前时间标准内最大可以找到5桶中有毒那一桶
        // 如果有两只猪，那么可以建构二维数组，长度均为可以校验的时间次数（当前是5）
        // 1 ,  2,  3,  4,  5
        // 6 ,  7,  8,  9, 10
        // 11, 12, 13, 14, 15
        // 16, 17, 18, 19, 20
        // 21, 22, 23, 24, 25
        // 0,15,30,45分别时，可以让猪1和猪2分别以横和以竖来喝
        // 即 0分钟 猪1喝：1,2,3,4,5，猪2喝：1,6,11,16,21
        // 即 15分钟 猪1喝：6,7,8,9,10，猪2喝：2,7,12,17,22
        // 即 30分钟 猪1喝：11,12,13,14,15，猪2喝：3,8,13,18,23
        // 即 45分钟 猪1喝：16,17,18,19,20，猪2喝：4,9,14,19,24
        // 如果桶1有毒，猪1和猪2在15分钟内死亡
        // 如果桶2有毒，猪1在15分钟内死亡，猪2在15-30分钟内死亡
        // 如果桶3有毒，猪1在15分钟内死亡，猪2在30-45分钟内死亡
        // 如果桶4有毒，猪1在15分钟内死亡，猪2在45-60分钟内死亡
        // 如果桶5有毒，猪1在15分钟内死亡，猪2不死亡
        // .
        // .
        // .
        // 如果桶24有毒，猪1不死亡，猪2在45-60分钟内死亡
        // 如果桶25有毒，那么两只猪都不会死亡
        // 结论：如果三只猪，可以建构三维数组（长度依据为可以校验的时间次数）
        // 所以题目可以转化为：base^pigNums >= buckets
        int count = 0;
        while (buckets > 0) {
            buckets /= base;
            count++;
        }
        return count;
    }
}
